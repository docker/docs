name: publish

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - published

jobs:
  publish:
    runs-on: ubuntu-20.04
    steps:
      -
        name: Prepare
        run: |
          JEKYLL_ENV=development
          DOCS_AWS_REGION=us-east-1
          if [ "${{ github.ref }}" = "refs/heads/master" ]; then
            DOCS_URL="https://docs-stage.docker.com"
            DOCS_S3_BUCKET="docs.docker.com-stage-us-east-1"
            DOCS_S3_CONFIG="_website-config-docs-stage.json"
            DOCS_LAMBDA_FUNCTION_CACHE="arn:aws:lambda:us-east-1:710015040892:function:docs-stage-cache-invalidator"
            DOCS_SLACK_MSG="Successfully promoted docs-stage from master. https://docs-stage.docker.com/"
          elif [ "${{ github.ref }}" = "refs/heads/published" ]; then
            JEKYLL_ENV=production
            DOCS_URL="https://docs.docker.com"
            DOCS_S3_BUCKET="docs.docker.com-us-east-1"
            DOCS_S3_CONFIG="_website-config-docs.json"
            DOCS_LAMBDA_FUNCTION_CACHE="arn:aws:lambda:us-east-1:710015040892:function:docs-cache-invalidator"
            DOCS_SLACK_MSG="Successfully published docs. https://docs.docker.com/"
          else
            echo >&2 "ERROR: unknown branch ${{ github.ref }}"
            exit 1
          fi
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "JEKYLL_ENV=$JEKYLL_ENV" >> $GITHUB_ENV
          echo "DOCS_URL=$DOCS_URL" >> $GITHUB_ENV
          echo "DOCS_AWS_REGION=$DOCS_AWS_REGION" >> $GITHUB_ENV
          echo "DOCS_S3_BUCKET=$DOCS_S3_BUCKET" >> $GITHUB_ENV
          echo "DOCS_S3_CONFIG=$DOCS_S3_CONFIG" >> $GITHUB_ENV
          echo "DOCS_LAMBDA_FUNCTION_CACHE=$DOCS_LAMBDA_FUNCTION_CACHE" >> $GITHUB_ENV
          echo "DOCS_SLACK_MSG=$DOCS_SLACK_MSG" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build website
        uses: docker/bake-action@v2
        with:
          targets: release
          set: |
            *.cache-from=type=gha,scope=publish-${{ env.BRANCH_NAME }}
            *.cache-to=type=gha,scope=publish-${{ env.BRANCH_NAME }},mode=max
      -
        name: Upload files to S3 bucket
        run: |
          aws --region ${{ env.DOCS_AWS_REGION }} s3 sync --acl public-read _site s3://${{ env.DOCS_S3_BUCKET }}/ --delete
      -
        name: Update S3 config
        uses: docker/bake-action@v2
        with:
          targets: aws-s3-update-config
          set: |
            *.cache-from=type=gha,scope=releaser
        env:
          AWS_REGION: ${{ env.DOCS_AWS_REGION }}
          AWS_S3_BUCKET: ${{ env.DOCS_S3_BUCKET }}
          AWS_S3_CONFIG: ${{ env.DOCS_S3_CONFIG }}
      -
        name: Invalidate docs website cache
        if: ${{ env.DOCS_LAMBDA_FUNCTION_CACHE != '' }}
        uses: docker/bake-action@v2
        with:
          targets: aws-lambda-invoke
          set: |
            *.cache-from=type=gha,scope=releaser
        env:
          AWS_REGION: ${{ env.DOCS_AWS_REGION }}
          AWS_LAMBDA_FUNCTION: ${{ env.DOCS_LAMBDA_FUNCTION_CACHE }}
      -
        name: Send Slack notification
        if: ${{ env.DOCS_SLACK_MSG != '' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"${{ env.DOCS_SLACK_MSG }}"}' ${{ secrets.SLACK_WEBHOOK }}
