##
# Default configuration file
#
# This file overrides options set in _config.yml for production / deploy
##

name: Docker Documentation

markdown: kramdown
highlighter: rouge
incremental: true
permalink: pretty
safe: false
lsi: false

# https://kramdown.gettalong.org/options.html
# https://github.com/kramdown/parser-gfm/blob/master/lib/kramdown/parser/gfm/options.rb
kramdown:
  input: GFM
  gfm_quirks: [paragraph_end, no_auto_typographic]
  hard_wrap: false
  html_to_native: true
  syntax_highlighter: rouge
  toc_levels: 2..3

exclude:
  - _releaser
  - _samples
  - _scripts
  - datacenter
  - docker-bake.hcl
  - ee
  - LICENSE
  - Makefile
  - README.md

# Component versions -- address like site.docker_ce_version
# You can't have - characters in these for non-YAML reasons.
# When updating 'latest_engine_api_version', also update 'min_api_threshold' below.
latest_engine_api_version: "1.41"
docker_ce_version: "20.10"
compose_v1_version: "1.29.2"
compose_version: "v2.7.0"
compose_file_v3: "3.9"
compose_file_v2: "2.4"
machine_version: "0.16.0"
distribution_version: "2.7"
compose_switch_version: "1.0.4"

# Options for displaying minimum API version requirements in the reference pages.
#
# The reference pages show badges for commands and options (flags) that require
# a minimum API version. While this information can be useful if an option was
# added in a recent version of the Docker Engine (and API), these badges are no
# longer relevant to most users if the minimum required version is quite "old".
#
# We assume users reading these pages to be on the current version, or at most
# on the version before that (which is already "unsupported"). Users running
# older versions have bigger problems on their hand, so we're not accounting for
# those.
#
# So, to reduce unnecessary clutter on the page, we only show the minimum required
# API version if it requires a relatively recent version of the Engine.
#
# The "min_api_threshold" option specifies the minimum required API version for
# which we show a badge (currently: API v1.40, or "Docker 19.03").
min_api_threshold: 1.40

# Enable search autocompletion (requires metadata.json to be generated)
local_search: true

# List of plugins to enable for local development builds. Mostly the same as
# for production.
plugins:
  - jekyll-redirect-from
  - jekyll-relative-links
  - jekyll-sitemap

# Assets
#
# We specify the directory for Jekyll so we can use @imports.
#
# For local development, we build css with the "expanded" format to produce
# human-readable output for easier debugging.
sass:
  sass_dir: _scss
  style: expanded

# Set default options / metadata for some paths.
#
# Setting options here prevents having to repeat the same option in front-matter
# on every page.
defaults:
  # Default one for development builds (local and PR previews)
  # sitemap is disabled here but not for production in _config_production.yml
  - scope:
      path: ""
      type: "pages"
    values:
      layout: docs
      toc_min: 2
      toc_max: 4

  # Set the correct edit-URL for some local and remote resources. We usually don't create a direct
  # edit link for these, and instead point to the directory that contains the file.
  - scope:
      path: engine/reference
    values:
      # FIXME: This edit url is as "best-effort" and doesn't match anything in docker/cli repo for plugins for example. It should be generated autmatically.
      edit_url: "https://github.com/docker/cli/tree/master/docs/reference"
  - scope:
      path: engine/reference/commandline
    values:
      edit_url: "https://github.com/docker/cli/tree/master/docs/reference/commandline"
      skip_read_time: true
  - scope:
      path: glossary.md
    values:
      edit_url: "https://github.com/docker/docker.github.io/blob/master/_data/glossary.yaml"

# Fetch upstream resources (reference documentation) used by _plugins/fetch_remote.rb
# - repo is the GitHub repository to fetch from
# - ref the Git reference
# - paths is a list to the resources within the remote repository
#   - dest is the destination path within the working tree
#   - src is a list of glob source paths within the remote repository
fetch-remote:
  - repo: "https://github.com/docker/cli"
    default_branch: "master"
    ref: "20.10"
    paths:
      - dest: "engine/extend"
        src:
          - "docs/extend/**"
      - dest: "engine"
        src:
          - "docs/deprecated.md"
      - dest: "engine/reference"
        src:
          - "docs/reference/run.md"
      - dest: "engine/reference/commandline"
        src:
          - "docs/reference/commandline/cli.md"
          - "docs/reference/commandline/dockerd.md"

  - repo: "https://github.com/docker/docker"
    default_branch: "master"
    ref: "20.10"
    paths:
      - dest: "engine/api"
        src:
          - "docs/api/**"

  - repo: "https://github.com/docker/compose-cli"
    default_branch: "main"
    ref: "main"
    paths:
      - dest: "cloud"
        src:
          - "docs/*.md"
          - "!docs/README.md" # readme to make things nice in the compose-cli repo, but meaningless here
          - "!docs/architecture.md" # Compose-CLI architecture, unrelated to cloud integration

  - repo: "https://github.com/docker/buildx"
    default_branch: "master"
    ref: "master"
    paths:
      - dest: "build/bake"
        src:
          - "docs/guides/bake/**"
      - dest: "build/buildx/drivers"
        src:
          - "docs/guides/drivers/**"

  - repo: "https://github.com/distribution/distribution"
    default_branch: "main"
    ref: "release/2.7"
    paths:
      - dest: "registry/spec"
        src:
          - "docs/spec/**"
          - "!docs/spec/api.md.tmpl"
      - dest: "registry"
        src:
          - "docs/configuration.md"

  - repo: "https://github.com/moby/buildkit"
    default_branch: "master"
    ref: "master"
    paths:
      - dest: "engine/reference/builder.md"
        src:
          - "frontend/dockerfile/docs/reference.md"
