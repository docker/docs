command: docker rm
short: Remove one or more containers
long: Remove one or more containers
usage: docker rm [OPTIONS] CONTAINER [CONTAINER...]
pname: docker
plink: docker.yaml
options:
- option: force
  shorthand: f
  value_type: bool
  default_value: "false"
  description: Force the removal of a running container (uses SIGKILL)
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: link
  shorthand: l
  value_type: bool
  default_value: "false"
  description: Remove the specified link
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
- option: volumes
  shorthand: v
  value_type: bool
  default_value: "false"
  description: Remove the volumes associated with the container
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  ### Remove a container

  This will remove the container referenced under the link
  `/redis`.

  ```bash
  $ docker rm /redis

  /redis
  ```

  ### Remove a link specified with `--link` on the default bridge network

  This will remove the underlying link between `/webapp` and the `/redis`
  containers on the default bridge network, removing all network communication
  between the two containers. This does not apply when `--link` is used with
  user-specified networks.

  ```bash
  $ docker rm --link /webapp/redis

  /webapp/redis
  ```

  ### Force-remove a running container

  This command will force-remove a running container.

  ```bash
  $ docker rm --force redis

  redis
  ```

  The main process inside the container referenced under the link `redis` will receive
  `SIGKILL`, then the container will be removed.

  ### Remove all stopped containers

  ```bash
  $ docker rm $(docker ps -a -q)
  ```

  This command will delete all stopped containers. The command
  `docker ps -a -q` will return all existing container IDs and pass them to
  the `rm` command which will delete them. Any running containers will not be
  deleted.

  ### Remove a container and its volumes

  ```bash
  $ docker rm -v redis
  redis
  ```

  This command will remove the container and any volumes associated with it.
  Note that if a volume was specified with a name, it will not be removed.

  ### Remove a container and selectively remove volumes

  ```bash
  $ docker create -v awesome:/foo -v /bar --name hello redis
  hello
  $ docker rm -v hello
  ```

  In this example, the volume for `/foo` will remain intact, but the volume for
  `/bar` will be removed. The same behavior holds for volumes inherited with
  `--volumes-from`.
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

