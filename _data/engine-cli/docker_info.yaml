command: docker info
short: Display system-wide information
long: |-
  This command displays system wide information regarding the Docker installation.
  Information displayed includes the kernel version, number of containers and images.
  The number of images shown is the number of unique images. The same image tagged
  under different names is counted only once.

  If a format is specified, the given template will be executed instead of the
  default format. Go's [text/template](https://golang.org/pkg/text/template/) package
  describes all the details of the format.

  Depending on the storage driver in use, additional information can be shown, such
  as pool name, data file, metadata file, data space used, total data space, metadata
  space used, and total metadata space.

  The data file is where the images are stored and the metadata file is where the
  meta data regarding those images are stored. When run for the first time Docker
  allocates a certain amount of data space and meta data space from the space
  available on the volume where `/var/lib/docker` is mounted.
usage: docker info [OPTIONS]
pname: docker
plink: docker.yaml
options:
- option: format
  shorthand: f
  value_type: string
  description: Format the output using the given Go template
  deprecated: false
  experimental: false
  experimentalcli: false
  kubernetes: false
  swarm: false
examples: |-
  ### Show output

  The example below shows the output for a daemon running on Ubuntu Linux,
  using the `overlay2` storage driver. As can be seen in the output, additional
  information about the `overlay2` storage driver is shown:

  ```console
  $ docker info

  Client:
   Context:    default
   Debug Mode: false
   Plugins:
    buildx: Docker Buildx (Docker Inc.)
      Version:  v0.8.2
      Path:     /usr/libexec/docker/cli-plugins/docker-buildx
    compose: Docker Compose (Docker Inc.)
      Version:  v2.6.0
      Path:     /usr/libexec/docker/cli-plugins/docker-compose
    scan: Docker Scan (Docker Inc.)
      Version:  v0.17.0
      Path:     /usr/libexec/docker/cli-plugins/docker-scan

  Server:
   Containers: 14
    Running: 3
    Paused: 1
    Stopped: 10
   Images: 52
   Server Version: 22.06.0
   Storage Driver: overlay2
    Backing Filesystem: extfs
    Supports d_type: true
    Using metacopy: false
    Native Overlay Diff: true
    userxattr: false
   Logging Driver: json-file
   Cgroup Driver: systemd
   Cgroup Version: 2
   Plugins:
    Volume: local
    Network: bridge host ipvlan macvlan null overlay
    Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
   Swarm: inactive
   Runtimes: io.containerd.runc.v2 io.containerd.runtime.v1.linux runc
   Default Runtime: runc
   Init Binary: docker-init
   containerd version: 212e8b6fa2f44b9c21b2798135fc6fb7c53efc16
   runc version: v1.1.1-0-g52de29d
   init version: de40ad0
   Security Options:
    apparmor
    seccomp
     Profile: builtin
    cgroupns
   Kernel Version: 5.15.0-25-generic
   Operating System: Ubuntu 22.04 LTS
   OSType: linux
   Architecture: x86_64
   CPUs: 1
   Total Memory: 991.7 MiB
   Name: ip-172-30-0-91.ec2.internal
   ID: 4cee4408-10d2-4e17-891c-a41736ac4536
   Docker Root Dir: /var/lib/docker
   Debug Mode: false
   Username: gordontheturtle
   Registry: https://index.docker.io/v1/
   Experimental: false
   Insecure registries:
    myinsecurehost:5000
    127.0.0.0/8
   Live Restore Enabled: false
  ```

  ### <a name="format"></a> Format the output (--format)

  You can also specify the output format:

  ```console
  $ docker info --format '{{json .}}'

  {"ID":"I54V:OLXT:HVMM:TPKO:JPHQ:CQCD:JNLC:O3BZ:4ZVJ:43XJ:PFHZ:6N2S","Containers":14, ...}
  ```

  ### Run `docker info` on Windows

  Here is a sample output for a daemon running on Windows Server:

  ```console
  C:\> docker info

  Client:
   Context:    default
   Debug Mode: false
   Plugins:
    buildx: Docker Buildx (Docker Inc., v0.8.2-docker)
    compose: Docker Compose (Docker Inc., v2.6.0)
    scan: Docker Scan (Docker Inc., v0.17.0)

  Server:
   Containers: 1
    Running: 0
    Paused: 0
    Stopped: 1
   Images: 17
   Server Version: 20.10.16
   Storage Driver: windowsfilter
   Logging Driver: json-file
   Plugins:
    Volume: local
    Network: ics internal l2bridge l2tunnel nat null overlay private transparent
    Log: awslogs etwlogs fluentd gcplogs gelf json-file local logentries splunk syslog
   Swarm: inactive
   Default Isolation: process
   Kernel Version: 10.0 20348 (20348.1.amd64fre.fe_release.210507-1500)
   Operating System: Microsoft Windows Server Version 21H2 (OS Build 20348.707)
   OSType: windows
   Architecture: x86_64
   CPUs: 8
   Total Memory: 3.999 GiB
   Name: WIN-V0V70C0LU5P
   ID: 2880d38d-464e-4d01-91bd-c76f33ba3981
   Docker Root Dir: C:\ProgramData\docker
   Debug Mode: false
   Registry: https://index.docker.io/v1/
   Experimental: true
   Insecure Registries:
    myregistry:5000
    127.0.0.0/8
   Registry Mirrors:
     http://192.168.1.2/
     http://registry-mirror.example.com:5000/
   Live Restore Enabled: false
  ```
deprecated: false
experimental: false
experimentalcli: false
kubernetes: false
swarm: false

