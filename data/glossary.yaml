base image: |
  A base image is an image you designate in a `FROM` directive in a Dockerfile.
  It defines the starting point for your build.
  Dockerfile instructions create additional layers on top of the base image.
  A Dockerfile with the `FROM scratch` directive uses an empty base image.

build: |
  Build is the process of building Docker images using a Dockerfile. The build
  uses a Dockerfile and a "context". The context is the set of files in the
  directory in which the image is built.

container: |
  A container is a runnable instance of an image. You can start, stop, move, or
  delete a container using the Docker CLI or API. Containers are isolated from
  one another and the host system but share the OS kernel. They provide a
  lightweight and consistent way to run applications.

context: |
  A Docker context contains endpoint configuration for the Docker CLI to connect
  to different Docker environments, such as remote Docker hosts or Docker
  Desktop. Use `docker context use` to switch between contexts.

Docker CLI: |
  The Docker CLI is the command-line interface for interacting with the Docker
  Engine. It provides commands like `docker run`, `docker build`, `docker ps`,
  and others to manage Docker containers, images, and services.

Docker Compose: |
  Docker Compose is a tool for defining and running multi-container Docker
  applications using a YAML file (`compose.yaml`). With a single command, you
  can start all services defined in the configuration.

Docker Desktop: |
  Docker Desktop is an easy-to-install application for Windows, macOS, and Linux
  that provides a local Docker development environment. It includes Docker
  Engine, Docker CLI, Docker Compose, and a Kubernetes cluster.

Docker Engine: |
  Docker Engine is the client-server technology that creates and runs Docker
  containers. It includes the Docker daemon (`dockerd`), REST API, and the
  Docker CLI client.

Docker Hub: |
  Docker Hub is Dockerâ€™s public registry service where users can store, share,
  and manage container images. It hosts Docker Official Images, Verified
  Publisher content, and community-contributed images.

image: |
  An image is a read-only template used to create containers. It typically
  includes a base operating system and application code packaged together using
  a Dockerfile. Images are versioned using tags and can be pushed to or pulled
  from a container registry like Docker Hub.

layer: |
  In an image, a layer is a modification represented by an instruction in the
  Dockerfile. Layers are applied in sequence to the base image to create the
  final image. Unchanged layers are cached, making image builds faster and more
  efficient.

multi-architecture image: |
  A multi-architecture image is a Docker image that supports multiple CPU
  architectures, like `amd64` or `arm64`. Docker automatically pulls the correct
  architecture image for your platform when using a multi-arch image.

persistent storage: |
  Persistent storage or volume storage provides a way for containers to retain
  data beyond their lifecycle. This storage can exist on the host machine or an
  external storage system and is not tied to the container's runtime.

registry: |
  A registry is a storage and content delivery system for Docker images. The
  default public registry is Docker Hub, but you can also set up private
  registries using Docker Distribution.

volume: |
  A volume is a special directory within a container that bypasses the Union
  File System. Volumes are designed to persist data independently of the
  container lifecycle. Docker supports host, anonymous, and named volumes.